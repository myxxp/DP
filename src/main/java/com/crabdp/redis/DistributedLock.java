package com.crabdp.redis;

/**
 * 分布式锁
 * 1. 互斥性：在任意时刻，只有一个客户端能持有锁。
 * 2. 无死锁：即使持有锁的客户端崩溃而没有主动解锁，锁也会被释放。
 * 3. 容错性：只要大部分Redis节点正常运行，客户端就可以获取和释放锁。
 * 4. 高可用性：客户端在任意时间都可以获取和释放锁。
 * 5. 解铃还须系铃人：只有加锁的客户端才能解锁。
 * 6. 高性能：加锁和解锁需要在一个命令中完成。
 * 7. 防止死锁：加锁和解锁需要使用相同的标识。
 * 8. 防止误解锁：解锁时需要检查标识是否一致。
 * 9. 防止超时：加锁时需要设置超时时间。
 * 10. 防止阻塞：加锁时需要设置阻塞时间。
 * 11. 防止重入：加锁时需要设置重入次数。
 * 12. 防止重复：加锁时需要设置重复次数。
 * 13. 防止竞争：加锁时需要设置竞争次数。
 * 14. 防止超限：加锁时需要设置超限次数。
 * 15. 防止重试：加锁时需要设置重试次数。
 * 16. 防止重置：加锁时需要设置重置次数。
 */
public interface DistributedLock {

    /**
     * 加锁
     * @param timeoutSec
     * @return
     */
    boolean tryLock(long timeoutSec);

    /**
     * 解锁
     */
    void unlock();

}
